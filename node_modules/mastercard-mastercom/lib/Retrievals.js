/*
 * Copyright (c) 2013 - 2016, MasterCard International Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification, are 
 * permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of 
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of 
 * conditions and the following disclaimer in the documentation and/or other materials 
 * provided with the distribution.
 * Neither the name of the MasterCard International Incorporated nor the names of its 
 * contributors may be used to endorse or promote products derived from this software 
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY 
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES 
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT 
 * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER 
 * IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING 
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 *
 */

var MasterCardAPI = require('mastercard-api-core');
var ResourceConfig = require('./resourceconfig');
var Retrievals = {};
var operationConfigs = {};

/**
 * Initialize Retrievals
 * @private
 */
var _init = function() {
  operationConfigs["e3943e63-a961-445f-a59b-7b845b90d956"] = new MasterCardAPI.OperationConfig("/mastercom/v6/claims/{claim-id}/retrievalrequests/{request-id}/fulfillments", "create", [""], [""]);
operationConfigs["e7e13c55-0ea3-492b-b745-a9fe2c2d3230"] = new MasterCardAPI.OperationConfig("/mastercom/v6/claims/{claim-id}/retrievalrequests", "create", [""], [""]);
operationConfigs["ad20e794-d23d-4ad4-bb7b-56e1f5646713"] = new MasterCardAPI.OperationConfig("/mastercom/v6/claims/{claim-id}/retrievalrequests/loaddataforretrievalrequests", "query", [""], [""]);
operationConfigs["9a9b2a36-b2dc-49d8-97db-0d7e86282eab"] = new MasterCardAPI.OperationConfig("/mastercom/v6/claims/{claim-id}/retrievalrequests/{request-id}/documents", "query", ["format"], [""]);
operationConfigs["19e0bf39-186b-4d00-9c55-800ce205aa06"] = new MasterCardAPI.OperationConfig("/mastercom/v6/claims/{claim-id}/retrievalrequests/{request-id}/fulfillments/response", "create", [""], [""]);
operationConfigs["966b2f0e-53df-41b9-81e7-0b7a13aef2e1"] = new MasterCardAPI.OperationConfig("/mastercom/v6/retrievalrequests/imagestatus", "update", [""], [""]);
operationConfigs["88be3cdb-e667-4108-bfab-71a94680193b"] = new MasterCardAPI.OperationConfig("/mastercom/v6/retrievalrequests/status", "update", [""], [""]);
};

_init();

/**
 * Private function to get operation config
 * @returns Object operation config
 * @private
 */
var _getOperationConfig = function(operationUUID) {
  var operationConfig = operationConfigs[operationUUID];

  if(!MasterCardAPI.isSet(operationConfig)) {
    throw new MasterCardAPI.MasterCardError.SDKError("Invalid operationUUID supplied: " + operationUUID);
  }

  return operationConfig;
};

var _getOperationMetaData = function() {
  return new MasterCardAPI.OperationMetaData(ResourceConfig.getVersion(), ResourceConfig.getHost(), ResourceConfig.getContext(), ResourceConfig.getJsonNative(), ResourceConfig.getContentTypeOverride());
};

/**
 * Function to create a Retrievals object.
 *
 * @method create
 * @param {Object} params - A map of parameters in which to create the Retrievals from.
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Retrievals.acquirerFulfillARequest = function(params, callback) {
  try {
    MasterCardAPI.execute({
      operationConfig: _getOperationConfig("e3943e63-a961-445f-a59b-7b845b90d956"),
      operationMetaData: _getOperationMetaData(),
      params: params
    }, callback);
  }
  catch (e) {
    callback(e, null);
  }

};
/**
 * Function to create a Retrievals object.
 *
 * @method create
 * @param {Object} params - A map of parameters in which to create the Retrievals from.
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Retrievals.create = function(params, callback) {
  try {
    MasterCardAPI.execute({
      operationConfig: _getOperationConfig("e7e13c55-0ea3-492b-b745-a9fe2c2d3230"),
      operationMetaData: _getOperationMetaData(),
      params: params
    }, callback);
  }
  catch (e) {
    callback(e, null);
  }

};
/**
 * Function to query a Retrievals object from the API.
 *
 * @method find
 * @param {Object} query - A map of parameters in which to create the Retrievals from.
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Retrievals.getPossibleValueListsForCreate = function(query, callback) {
  var params = MasterCardAPI.isSet(query) ? query : {};

  try {
    MasterCardAPI.execute({
      operationConfig: _getOperationConfig("ad20e794-d23d-4ad4-bb7b-56e1f5646713"),
      operationMetaData: _getOperationMetaData(),
      params: params
    }, callback);
  }
  catch (e) {
    callback(e, null);
  }

};
/**
 * Function to query a Retrievals object from the API.
 *
 * @method find
 * @param {Object} query - A map of parameters in which to create the Retrievals from.
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Retrievals.getDocumentation = function(query, callback) {
  var params = MasterCardAPI.isSet(query) ? query : {};

  try {
    MasterCardAPI.execute({
      operationConfig: _getOperationConfig("9a9b2a36-b2dc-49d8-97db-0d7e86282eab"),
      operationMetaData: _getOperationMetaData(),
      params: params
    }, callback);
  }
  catch (e) {
    callback(e, null);
  }

};
/**
 * Function to create a Retrievals object.
 *
 * @method create
 * @param {Object} params - A map of parameters in which to create the Retrievals from.
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Retrievals.issuerRespondToFulfillment = function(params, callback) {
  try {
    MasterCardAPI.execute({
      operationConfig: _getOperationConfig("19e0bf39-186b-4d00-9c55-800ce205aa06"),
      operationMetaData: _getOperationMetaData(),
      params: params
    }, callback);
  }
  catch (e) {
    callback(e, null);
  }

};
/**
 * Function to update a Retrievals object.
 *
 * @method update
 * @param {Object} params - A map of parameters on which to update the Retrievals object.
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Retrievals.retrievalFullfilmentImageStatus = function(params, callback) {
  try {
    MasterCardAPI.execute({
      operationConfig: _getOperationConfig("966b2f0e-53df-41b9-81e7-0b7a13aef2e1"),
      operationMetaData: _getOperationMetaData(),
      params: params
    }, callback);
  }
  catch (e) {
    callback(e, null);
  }

};

/**
 * Function to update a Retrievals object.
 *
 * @method update
 * @param {Object} params - A map of parameters on which to update the Retrievals object.
 * @param {Function} callback - A function to handle success/error responses from the API.<br/>
 * The function takes 2 parameters, the first is an error object. This is null if no error occurs. The second parameter is the response data. This is null if an error occurs.
 */
Retrievals.retrievalFullfilmentStatus = function(params, callback) {
  try {
    MasterCardAPI.execute({
      operationConfig: _getOperationConfig("88be3cdb-e667-4108-bfab-71a94680193b"),
      operationMetaData: _getOperationMetaData(),
      params: params
    }, callback);
  }
  catch (e) {
    callback(e, null);
  }

};


module.exports = Retrievals;